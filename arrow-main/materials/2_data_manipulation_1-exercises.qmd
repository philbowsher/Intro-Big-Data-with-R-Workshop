---
title: "Data Manipulation Part 1 - Exercises"
execute:
  echo: true
  messages: false
  warning: false
editor: source
---

```{r}
#| label: load-packages
library(arrow)
library(dplyr)
library(stringr)
```

```{r}
#| label: open-dataset
nyc_taxi <- open_dataset("/mnt/shared/data/nyc-taxi-tiny/")
```

::: {#exercise-collect .callout-tip}
# Using `collect()` to run a query

::: panel-tabset
## Problems

Use the function `nrow()` to work out the answers to these questions:

1.  How many taxi fares in the dataset had a total amount greater than \$100?


## Solution 1

```{r}
#| label: collect-1
#| cache: true
nyc_taxi |>
  filter(total_amount > 100) |>
  nrow()
```

:::
:::

::: {#exercise-dplyr-api .callout-tip}
# Using the dplyr API in arrow

::: panel-tabset
## Problems

1.  Use the `dplyr::filter()` and `stringr::str_ends()` functions to return a subset of the data which is a) from September 2020, and b) the value in `vendor_name` ends with the letter "S".

2.  Try to use the `stringr` function `str_replace_na()` to replace any `NA` values in the `vendor_name` column with the string "No vendor" instead. What happens, and why?

3.  Bonus question: see if you can find a different way of completing the task in question 2.

## Solution 1

```{r}
#| label: collect-sol1
# #| eval: false
nyc_taxi |>
  filter(str_ends(vendor_name, "S"), year == 2017,  month == 9) |>
  collect()
```

`stringr::str_replace_na()` hasn't been implemented in Arrow. You could try using `mutate()` and `ifelse()` here instead.

```{r}
#| label: collect-sol3
# #| eval: false
nyc_taxi |>
  mutate(vendor_name = ifelse(is.na(vendor_name), "No vendor", vendor_name)) |>
  head() |>
  collect()
```

Or, if you only needed a subset of the data, you could apply the function after collecting it into R memory.

```{r}
#| label: collect-sol4
# #| eval: false
nyc_taxi |>
  filter(year == 2017, month == 10) |> # smaller subset of the data
  collect() |>
  mutate(vendor_name = stringr::str_replace_na(vendor_name, "No vendor"))
```
:::
:::

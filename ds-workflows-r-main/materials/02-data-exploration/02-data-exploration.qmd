---
title: "Explore Data"
format:
  html:
    toc: true
    toc-location: left
    anchor-sections: true
    code-fold: true
    code-overflow: wrap
    code-summary: "Show Code"
    code-tools: true
    code-link: true
editor: visual
editor_options: 
  chunk_output_type: inline
  canonical: true
html-table-processing: none
---

## Goals

The goals of this activity are to:

-   get familiar with the Washington State Ferries data and weather data
-   use `skimr::skim` and `pointblank::scan_data` to explore data

‚úèÔ∏è There will be placeholders (`____`) in the code cells below that you will need to fill in!

## Setup

```{r}
#| label: setup

library(DBI)
library(odbc)
library(skimr)
library(pointblank)
library(tidyverse)
library(glue)
library(gt)

```

## Task 1 - Read in raw data

üîÑ Task

Retrieve the raw data from the database for exploration.

### Connect to the database

```{r}
#| label: make database connection

# Run this code as-is 
con <- dbConnect(
  odbc::odbc(),
  Driver      = "postgresql",
  Server      = Sys.getenv("DATABASE_HOST"),
  Port        = "5432",
  Database    = Sys.getenv("DATABASE_NAME_R"),
  UID         = Sys.getenv("DATABASE_USER_R"),
  PWD         = Sys.getenv("DATABASE_PASSWORD_R"),
  timeout     = 10
)

```

### Read in data

Now we will use `dplyr` to define a data table from a database

```{r}
#| label: read in raw data

vesselinfo_raw <- dplyr::tbl(con, "vesselinfo_raw")

vesselhistory_raw <- dplyr::tbl(con, "vesselhistory_raw")

weather_terminal_history_raw <- dplyr::tbl(con, "weather_terminal_history_raw")

```

## Task 2 - Explore the data

üîÑ Task

Begin exploring the data. You will want to understand:

-   What columns exist in the data?
-   How do the data sets relate to one another?
-   What is the type of each column (e.g. string, number, category, date)?
-   Which columns could be useful for the model?
-   Is all of the data in scope?
-   What steps will I need to perform to clean the data?

### Weather data

```{r}
# preview the data
head(weather_terminal_history_raw)

# What terminals do we have data for? 
weather_terminal_history_raw |> pull(terminal) |> unique() |> sort()
```

When we pulled the weather data, we added the terminal name and lat/long data that came from our terminal locations lookup. We'll want to be certain the terminal names are consistent with the terminal names in the vessel history data.

### Vessel history

```{r}
# preview the data
head(vesselhistory_raw)

# What terminals do we have data for?
vesselhistory_raw |> pull(departing) |> unique() |> sort()
```

We see that the dates are in an awkward format. We'll need to convert them when we clean the data. And as suspected, we'll need to align the terminal names in the weather data with those in the sailing history data.

### Vessel Info

```{r}
# preview the data
head(vesselinfo_raw)

# how many different vessels do we have info for?
vesselinfo_raw |> pull(vessel_name) |> unique()

# get to know the ferries
vesselinfo_raw |> select(vessel_name, vessel_name_desc) |> gt()
```

There's a lot of information in this data frame. Let's use some tools to explore more. Maybe you're already familiar with `glimpse` and `summary` for preliminary data exploration. Do you know `skimr::skim()`? `skim` provides a compact view of column schemas, missing values, and a profile of the values.

```{r}

glimpse(vesselinfo_raw)

skim(vesselinfo_raw)

```

There's another data exploration tool for the toolbox. The `pointblank::scan_data()` function provides a HTML report of the input data to help you understand your data. It contains 6 sections:

-   **Overview (O)**: Table dimensions, duplicate row counts, column types, and reproducibility information
-   **Variables (V)**: A summary for each table variable and further statistics and summaries depending on the variable type
-   **Interactions (I)**: A matrix plot that shows interactions between variables
-   **Correlations (C)**: A set of correlation matrix plots for numerical variables
-   **Missing Values (M)**: A summary figure that shows the degree of missingness across variables
-   **Sample (S)**: A table that provides the head and tail rows of the data set

‚ö†Ô∏è The "Correlations" and "Interactions" sections take the longest to run, especially on a larger data set. Save time by omitting sections that are not needed.

Let's scan a simplified version of `vesselinfo_raw`, dropping some of the unneeded columns for faster processing during the Workshop. We'll also use `collect()` to pull into local memory. (Did you notice that up until this point, we have been doing all of our exploration directly on the database table?)

```{r}
#| label: abbreviated vesselinfo_raw
#| eval: false

vesselinfo_raw_abbreviated <- vesselinfo_raw |> 
  select(vessel_name, 
         status, 
         city_built, 
         speed_in_knots, 
         engine_count, 
         horsepower, 
         length,  
         max_passenger_count, 
         passenger_only, 
         propulsion_info, 
         reg_deck_space, 
         year_built, 
         year_rebuilt, 
         solas_certified
         ) |> collect()
  
```

Run the `data_scan` on `vesselinfo_raw_abbreviated`, but omit "Correlations (C)" and "Interactions (I)" because they are time consuming and not relevant for this data, i.e., only do sections "OVMS".

```{r}
#| label: Data scan on `vesselinfo_raw_abbreviated`
#| eval: false

scan <- pointblank::scan_data(vesselinfo_raw_abbreviated, sections = "OVS")
scan

```

Let's explore the results. Can you identify:

-   Are there any duplicate rows?

-   Where were most of the vessels built? (Hint: Click the "Toggle details" button)

-   Very roughly speaking, the Boeing 737 (another Seattle native) has *on the order of* 15-20,000 horsepower while cruising. Are there any WSDOT ferries with comparable horsepower?

-   Where in the data frame are there missing values?

## Bonus - Create a data dictionary

üîÑ Task

-   Create a data dictionary describing `vesselhistory_raw`

Pointblank helps us to document and provide context about our data. We use an "Informant" to create a data dictionary, which will be a part of our project documentation.

```{r}
#| label: data dictionary

create_informant(
  tbl = vesselhistory_raw,
  label = md("Data Dictionary - Historical Vessel Sailings Data from [WSDOT Traveler Information API](https://wsdot.wa.gov/traffic/api/)")) |> 
  info_tabular(
    description = "This table the columns in the vessel sailing history data."
  ) |> 
  info_section(
    section_name = "further information",
    `üîÑ updates` = "This table last updated {Sys.Date()}.",
    `sources` = md("Data from [WSDOT Traveler Information API](https://wsdot.wa.gov/traffic/api/)")
  ) |> 
  info_columns(
    columns = vessel_id,
    `‚ÑπÔ∏è` = "The vessel id"
  ) |> 
  info_columns(
    columns = vessel,
    `‚ÑπÔ∏è` = "The name of the vessel"
  ) |> 
  info_columns(
    columns = departing,
    `‚ÑπÔ∏è` = "The name of the departure terminal"
  ) |> 
  info_columns(
    columns = arriving,
    `‚ÑπÔ∏è` = "The name of the arrival terminal"
  ) |> 
  info_columns(
    columns = scheduled_depart,
    `‚ÑπÔ∏è` = "The scheduled departure time, Pacific Time"
  ) |> 
  info_columns(
    columns = actual_depart,
    `‚ÑπÔ∏è` = "The actual departure time, Pacific Time"
  ) |> 
  info_columns(
    columns = est_arrival,
    `‚ÑπÔ∏è` = "The scheduled arrival time, Pacific Time"
  ) |> 
  info_columns(
    columns = date,
    `‚ÑπÔ∏è` = "Sailing date"
  ) |> 
    incorporate()
```

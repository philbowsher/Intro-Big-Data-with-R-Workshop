---
execute: 
  eval: false
---

## Raw Data Retrieval, Working with {.title-slide-light}
<h2>Databases, and Automation</h2>
![](https://httr2.r-lib.org/logo.png){.absolute top="200" left="50" width="260"} ![](slide_resources/db.png){.absolute top="200" left="310" width="260"}

## Section Agenda {.brackets-dark-teal}

-   Downloading data from sources
-   Writing production data to a database
-   Automating the pipeline
-   Email alerting, part 1 

## Project Overview {.minimal}


![](slide_resources/ds-workflows-r-2024.jpg){fig-align="center"}


## Download raw data from an API endpoint

Your first instinct for retrieving raw data may be to download the data as a csv file. 
<br><br>

:::{.fragment}
ðŸ’¡ There's a better way!
:::

:::{.incremental}
- Many data sources offer an API endpoint for downloading data 
- `{httr2}` provides wrapper functions around `curl` requests for easier querying and handling of responses
:::

:::{.fragment}
{{< bi sign-turn-right-fill color=orange >}} `{httr2}` is a ground-up rewrite of `{httr}` that is pipeable! It implements an explicit `request` object that solves common problems such as built-in rate-limiting, retries, OAuth, secure secrets, and more.

:::

## Reading API Documentation
<https://wsdot.wa.gov/traffic/api/>
<iframe src="https://wsdot.wa.gov/traffic/api/" width=100% height =800></iframe>

## Example `httr2` request

Here's how we will query the `vesselverbose` endpoint at

`https://www.wsdot.wa.gov/ferries/api/vessels/rest/vesselverbose?apiaccesscode={WSDOT_ACCESS_CODE}`


```{r}
#| eval: false
#| code-line-numbers: "1-2|4-7|9-11|13-17"
base_url <- "https://www.wsdot.wa.gov"
endpoint <- "ferries/api/vessels/rest/vesselverbose"

# Compose the API request 
req <- request(base_url) |> 
  req_url_path_append(endpoint) |> 
  req_url_query(apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) 
  
# perform the request
response <- req |> 
  req_perform()

# convert the body of the response to a tibble
response_body <- response |> 
  resp_body_string() |> 
  jsonlite::fromJSON() |> 
  as_tibble()
```

## 

:::{.center}
<h2> <br>**Activity Time!**</h2>
:::

:::{.callout-note icon=false}
## Activity
ðŸ‘‰ Activity objective: Download the `vesselverbose` data from the WSDOT API endpoint.

- Open the project `materials/01-raw-data-write/01-raw-data-write.Rproj`
- Open the file `01-raw-data-write.qmd`
- ðŸ›‘ We will work through **Task 1 - Task 2** only 

:::

## Where should I put the data?

:::{.fragment .middle .r-fit-text}
ðŸ“£ Production data belongs in a database.
:::

## Database Connection Essentials

::::{.smaller}

::: {.columns}
::: {.column width=25%}

**2 parts to a database connection:**

:::

::: {.column width=75%}
1. A driver (on your system or as part of a R package)
2. A means to interact with the driver (e.g., `{DBI}` package)
:::
::: 







::: {.columns}
::: {.column .fragment}
[**Best case:**]{.positgreen} one of the DBI-compliant db-specific packages

![](slide_resources/con_sans_odbc.png){.absolute bottom="180" left="30" width="47%" }

:::
::: {.column .fragment}
[**Alternative:**]{.posityellow} `odbc::odbc()` + an ODBC driver installed on your system
![](slide_resources/con_w_odbc.png){.absolute bottom="180" right="30" width="47%" }

:::
::: 

:::{.fragment .absolute bottom="30"}
ðŸ“£ When possible, use a database-specific R package (e.g., `RPostgres`, `RMariaDB`, `RSQLite`, `bigrquery`, etc.) instead of `odbc` + a driver. In many cases, they are more performant (especially in writing data) and may have more translations available for query types.
:::

::::

## Interacting with Databases

:::{.incremental}

- What tables are in a database? `DBI::dbListTables(con)`
- Use `dplyr` to interact with the database table in the same manner you would a local data frame
  ```{.r code-line-numbers=false}
  df <- dplyr::tbl(con, "my_table")
  df |> filter(...) |> mutate(...) |> group_by(...) |> summarise(...)
  
  ```
- ðŸ“£ Do as much work as possible in the database to save time and resources before bringing the table into local memory. 
- Use `dplyr::collect()` to bring the table into memory. Try to use `collect` as late as possible in your queries / transformations

  ```{.r code-line-numbers=false}
  df |> ... |> collect()
  
  ```

:::

## More on databases {.content-light}

:::{.callout-tip icon=false}
## {{< bi sign-turn-right-fill color=orange >}} Best practices in working with databases

<https://solutions.posit.co/connections/db/> 


Specific resources:

::::{columns}

:::{.column width=40%}
- [Connect to a database](https://solutions.posit.co/connections/db/getting-started/connect-to-database/)
- [Query a database table](https://solutions.posit.co/connections/db/getting-started/database-queries/)
:::

:::{.column width=60%}

- [Securing credentials](https://solutions.posit.co/connections/db/best-practices/managing-credentials/)
- [Making scripts portable](https://solutions.posit.co/connections/db/best-practices/portable-code/)
:::
::::

:::

## 

:::{.center}
<h2> <br>**Activity Time!**</h2>
:::

:::{.callout-note icon=false}
## Activity
ðŸ‘‰ Activity objective: Write the `vesselverbose` data to the database.

- Return to the file `01-raw-data-write.qmd`
- ðŸ›‘ We will work through **Task 3 - Task 5** only 

:::


## How do I automate this process?

:::{.fragment}
ðŸ§° Deploy and [schedule]{.positburg} your ETL and reports on Posit Connect
<br>


::: {.columns}
::: {.column width=30%}
![](slide_resources/scheduling.png){height="700" fig-align="center"}

:::
::: {.column width=70%}

<br>

- Connect renders your notebook / runs your code
- Render on demand or on a schedule
- Can email the rendered report or notebook to you, collaborators, and/or viewers
:::
::: 



:::



## Introduction to Emailing with Posit Connect

Posit Connect can send an email when a report or notebook renders

:::::{.columns}


:::{.column width=25%}
::::{.fragment}
![](slide_resources/email_option.png){height=700 style="padding-left: 25px;"}
::::
:::


:::{.column width=18% .fragment}


[{{< bi arrow-right >}}]{.largest .middle}
:::

:::{.column width=50%}

::::{.fragment}

![](slide_resources/html_email.png){style="padding-top: 50px;"}

::::

:::


:::::


::: {.fragment .absolute style="background: #F5EF94; width: 600px; height: 400px; padding: 30px; box-shadow: 0 18px 18px -9px lightgray; margin-left: auto; margin-right: auto;" top="350" right="220"}

[ðŸš«]{.larger}


ðŸ¥± This email is non-informative

ðŸ”Š Creates noise in the inbox

ðŸ™ˆ Does not compel anyone to look at it
:::






## Introduction to Emailing with ![](slide_resources/quarto-logo-trademark.svg){width=350 style="vertical-align:middle"} and Connect

Create richly-formatted emails as part of your Quarto notebook


:::{.columns}

:::{.fragment fragment-index=1 .column width=20%}
![](slide_resources/email_option.png){height=700 style="padding-left: 25px;"}
:::

:::{.fragment fragment-index=2 .column width=6%}
[+]{.largest .middle}
:::


:::{.fragment fragment-index=2 .column width=20%}
![](slide_resources/quarto-icon.svg){.middle width=230 style="padding-left: 45px;"}
:::

:::{.fragment fragment-index=3 .column width=10%}
[=]{.largest .middle}
:::

:::{.fragment fragment-index=3 .column width=44%}


![](slide_resources/email_waffles.png)
[ðŸ§° <br>Customized emails]{.large}

:::

:::

## A Basic Quarto Email


````{markdown}
#| class-source: longest_code_block
#| classes: longest_code_block
#| code-line-numbers: "|3|6-9|11-19"
---
title: Something wonderful 
format: email
---

Some of the content in this document makes its way to the rendered HTML
and some of it is destined for a custom email message. The 'email' block
customizes the subject and the body of the email message, while the
rendered HTML contains only this paragraph.

:::: {email}

This email was sent from Quarto! 

::: {subject}
subject
:::

::::

````

## A Basic Quarto Email with [Conditional Send]{.posityellow}


````{markdown}
#| class-source: longest_code_block
#| eval: false
#| classes: longest_code_block
#| code-line-numbers: "|11-13|15-29"
---
title: Something wonderful 
format: email
---

Some of the content in this document makes its way to the rendered HTML
and some of it is destined for a custom email message. The 'email' block
customizes the subject and the body of the email message, while the
rendered HTML contains only this paragraph.

```{r}
send_email <- sample(c("TRUE", "FALSE"), 1)
```

:::: {email}

:::{email-scheduled}
```{r}
send_email
```
:::

This email was occasionally sent from Quarto! 

::: {subject}
subject
:::

::::

````


## 

:::{.center}
<h2> <br>**Activity Time!**</h2>
:::

:::{.callout-note icon=false}

## Activity, Part 1
ðŸ‘‰ Activity objective: Work with a simple Quarto email document and preview the email locally

- Return to the project `01-raw-data-write.Rproj`
- Open the file `simple-quarto-email/_simple-quarto-email.qmd`
- We will render this document and preview the email locally

:::

:::{.callout-note icon=false}

## Activity, Part 2
ðŸ‘‰ Activity objective: deploy and schedule our production notebook on Posit Connect so it runs automatically and sends an email if there's something amiss with the raw data.

- Return to the file `01-raw-data-write.qmd`
- ðŸ›‘ We will work **Task 6 to the end of the document**

:::


## Recap of Alerting, Part 1

![](slide_resources/project_conditional_email_send.png){fig-align="center"}

## Where are we

![](slide_resources/ds-workflows-r-2024.jpg){fig-align="center"}